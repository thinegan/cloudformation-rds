# Note, the development RDS is not Multi-AZ supported
# Only the production RDS is Multi-AZ supported
# The default RDS Username/DBName/Password is for testing purpose only.
#
---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    Database stack creation prerequisite:
    - RDS Security Group
Parameters:

  PMServerEnv:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"

  PMPrivateSubnets:
    Description: "Subnets to launch instances into"
    Type: "List<AWS::EC2::Subnet::Id>"

  PMRDSSG:
    Description: "Select the Security Group to use for the ELB"
    Type: "AWS::EC2::SecurityGroup::Id"

  PMDBClusterIdentifier:
    Description: "Db Cluster Name."
    Type: "String"

  PMDBClusterParameterGroupName:
    Description: "Db Parameter Groupname"
    Type: "String"

  PMDatabaseUsername:
    NoEcho: 'true'
    Type: "String"
    Description: "Database admin account name"

  PMDatabasePassword:
    NoEcho: 'true'
    Type: "String"
    Description: "Database admin account password"
        
  PMDatabaseEngine:
    Type: "String"
    Description: "Database engine, Aurora, MySQL or PostgreSQL"

  PMDatabaseEngineVer:
    Type: "String"
    Description: "Database engine ver"

  PMDatabaseInstanceClass:
    Type: "String"
    Description: "Database instance class, e.g. db.t2.micro (free tier)"

###########################################################################################
Resources:

  DbSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: !Sub "${PMServerEnv} RDS DB subnet group"
      SubnetIds:
        Ref: "PMPrivateSubnets"

  RDSDBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties:
      Description: "CloudFormation Sample Aurora Cluster Parameter Group"
      Family: !Ref "PMDBClusterParameterGroupName"
      Parameters:
        time_zone: "UTC"
        collation_connection: "utf8_general_ci"
        character_set_database: "utf8"

  DatabaseCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      DBSubnetGroupName: !Ref "DbSubnetGroup"
      VpcSecurityGroupIds:
      - Ref: "PMRDSSG"
      Engine: !Ref "PMDatabaseEngine"
      EngineVersion: !Ref "PMDatabaseEngineVer"
      MasterUsername: !Ref "PMDatabaseUsername"
      MasterUserPassword: !Ref "PMDatabasePassword"
      DBClusterParameterGroupName: !Ref "RDSDBClusterParameterGroup"
      StorageEncrypted: 'true'
      BackupRetentionPeriod: '3'
      PreferredBackupWindow: '12:00-13:00'
      PreferredMaintenanceWindow: 'mon:13:00-mon:14:00'

  Database1:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: !Ref "PMDatabaseEngine"
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: !Ref "PMDatabaseInstanceClass"
      DBSubnetGroupName: !Ref "DbSubnetGroup"
      DBInstanceIdentifier: !Sub "${PMDBClusterIdentifier}-db1"

  Database2:
    Type: "AWS::RDS::DBInstance"
    Properties:
      Engine: !Ref "PMDatabaseEngine"
      DBClusterIdentifier: !Ref "DatabaseCluster"
      DBInstanceClass: !Ref "PMDatabaseInstanceClass"
      DBSubnetGroupName: !Ref "DbSubnetGroup"
      DBInstanceIdentifier: !Sub "${PMDBClusterIdentifier}-db2"

Outputs:

  RdsDbId:
    Description: "RDS Database Cluster ID"
    Value: !Ref "DatabaseCluster"

  RdsEndpointAdd:
    Description: "RDS Database Endpoint"
    Value: !GetAtt "DatabaseCluster.Endpoint.Address"

  RdsReadEndpointAdd:
    Description: "RDS Read Database Endpoint"
    Value: !GetAtt "DatabaseCluster.ReadEndpoint.Address"

  RdsEndpointPort:
    Description: "RDS Database Port"
    Value: !GetAtt "DatabaseCluster.Endpoint.Port"

  DbUser:
    Description: "RDS Database admin account user"
    Value: !Ref "PMDatabaseUsername"

  DbPassword:
    Description: "RDS Database admin account password"
    Value: !Ref "PMDatabasePassword"